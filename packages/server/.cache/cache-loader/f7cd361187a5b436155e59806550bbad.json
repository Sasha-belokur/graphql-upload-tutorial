{"remainingRequest":"/home/alexandr/projects/graphql-upload-tutorial/node_modules/ts-loader/index.js??ref--16-1!/home/alexandr/projects/graphql-upload-tutorial/packages/server/src/fileStorage.ts","dependencies":[{"path":"/home/alexandr/projects/graphql-upload-tutorial/packages/server/src/fileStorage.ts","mtime":1553508143251},{"path":"/home/alexandr/projects/graphql-upload-tutorial/node_modules/cache-loader/dist/cjs.js","mtime":1553084366582},{"path":"/home/alexandr/projects/graphql-upload-tutorial/node_modules/ts-loader/index.js","mtime":1553084367278}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar _this = this;\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport shortid from 'shortid';\nvar save = function (uploadFileStream, location) {\n    var createReadStream = uploadFileStream.createReadStream, filename = uploadFileStream.filename, mimetype = uploadFileStream.mimetype;\n    var stream = createReadStream();\n    var id = shortid.generate() + \"-\";\n    var sanitizedFilename = filename.replace(/[^a-z0-9_.\\-]/gi, '_').toLowerCase();\n    var path = location + \"/\" + id + sanitizedFilename;\n    if (!fs.existsSync(location)) {\n        mkdirp.sync(location);\n    }\n    return new Promise(function (resolve, reject) {\n        return stream\n            .on('error', function (error) { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!stream.truncated) return [3, 2];\n                        return [4, this.delete(path)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        reject(error);\n                        return [2];\n                }\n            });\n        }); })\n            .pipe(fs.createWriteStream(path))\n            .on('error', function (error) { return reject(error); })\n            .on('finish', function () { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                resolve({ path: path, name: filename, type: mimetype });\n                return [2];\n            });\n        }); });\n    });\n};\nexport { save };\n",{"version":3,"file":"/home/alexandr/projects/graphql-upload-tutorial/packages/server/src/fileStorage.ts","sourceRoot":"","sources":["/home/alexandr/projects/graphql-upload-tutorial/packages/server/src/fileStorage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAkCgB;AAlChB,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,OAAO,MAAM,SAAS,CAAC;AAE9B,IAAM,IAAI,GAAG,UAAC,gBAAqB,EAAE,QAAgB;IAC7C,IAAA,oDAAgB,EAAE,oCAAQ,EAAE,oCAAQ,CAAsB;IAClE,IAAM,MAAM,GAAG,gBAAgB,EAAE,CAAC;IAClC,IAAM,EAAE,GAAM,OAAO,CAAC,QAAQ,EAAE,MAAG,CAAC;IACpC,IAAM,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;IACjF,IAAM,IAAI,GAAM,QAAQ,SAAI,EAAE,GAAG,iBAAmB,CAAC;IAGrD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;QAC1B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACzB;IAED,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QAC/B,OAAA,MAAM;aACL,EAAE,CAAC,OAAO,EAAE,UAAO,KAAY;;;;6BACxB,MAAM,CAAC,SAAS,EAAhB,cAAgB;wBAEpB,WAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAA;;wBAAvB,SAAuB,CAAC;;;wBAGxB,MAAM,CAAC,KAAK,CAAC,CAAC;;;;aACjB,CAAC;aACD,IAAI,CAAC,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAChC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAY,IAAK,OAAA,MAAM,CAAC,KAAK,CAAC,EAAb,CAAa,CAAC;aAC5C,EAAE,CAAC,QAAQ,EAAE;;gBACV,OAAO,CAAC,EAAE,IAAI,MAAA,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;;;aACrD,CAAC;IAbF,CAaE,CACL,CAAC;AACF,CAAC,CAAA;AAED,OAAO,EAAE,IAAI,EAAE,CAAC","sourcesContent":["import fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport shortid from 'shortid';\n\nconst save = (uploadFileStream: any, location: string): Promise<any> => {\nconst { createReadStream, filename, mimetype } = uploadFileStream;\nconst stream = createReadStream();\nconst id = `${shortid.generate()}-`;\nconst sanitizedFilename = filename.replace(/[^a-z0-9_.\\-]/gi, '_').toLowerCase();\nconst path = `${location}/${id}${sanitizedFilename}`;\n\n// Check if UPLOAD_DIR exists, create one if not\nif (!fs.existsSync(location)) {\n    mkdirp.sync(location);\n}\n\nreturn new Promise((resolve, reject) =>\n    stream\n    .on('error', async (error: Error) => {\n        if (stream.truncated) {\n        // Delete the truncated file\n        await this.delete(path);\n        }\n\n        reject(error);\n    })\n    .pipe(fs.createWriteStream(path))\n    .on('error', (error: Error) => reject(error))\n    .on('finish', async () => {\n        resolve({ path, name: filename, type: mimetype });\n    })\n);\n}\n\nexport { save };"]}]}