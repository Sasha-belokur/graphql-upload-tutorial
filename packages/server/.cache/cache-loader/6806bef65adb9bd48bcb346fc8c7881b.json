{"remainingRequest":"/home/alexandr/projects/graphql-upload-tutorial/node_modules/ts-loader/index.js??ref--16-1!/home/alexandr/projects/graphql-upload-tutorial/packages/server/src/resolvers.ts","dependencies":[{"path":"/home/alexandr/projects/graphql-upload-tutorial/packages/server/src/resolvers.ts","mtime":1553513940916},{"path":"/home/alexandr/projects/graphql-upload-tutorial/node_modules/cache-loader/dist/cjs.js","mtime":1553084366582},{"path":"/home/alexandr/projects/graphql-upload-tutorial/node_modules/ts-loader/index.js","mtime":1553084367278}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { save } from './fileStorage';\nexport default {\n    Mutation: {\n        uploadFiles: function (obj, _a) {\n            var files = _a.files;\n            return __awaiter(this, void 0, void 0, function () {\n                var uploadedFiles, e_1;\n                var _this = this;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _b.trys.push([0, 2, , 3]);\n                            return [4, Promise.all(files.map(function (uploadPromise) { return __awaiter(_this, void 0, void 0, function () { var _a; return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            _a = save;\n                                            return [4, uploadPromise];\n                                        case 1: return [2, _a.apply(void 0, [_b.sent(), 'public'])];\n                                    }\n                                }); }); }))];\n                        case 1:\n                            uploadedFiles = _b.sent();\n                            return [2, uploadedFiles];\n                        case 2:\n                            e_1 = _b.sent();\n                            console.log('error', e_1);\n                            throw new Error('upload:fileNotLoaded');\n                        case 3: return [2];\n                    }\n                });\n            });\n        }\n    }\n};\n",{"version":3,"file":"/home/alexandr/projects/graphql-upload-tutorial/packages/server/src/resolvers.ts","sourceRoot":"","sources":["/home/alexandr/projects/graphql-upload-tutorial/packages/server/src/resolvers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAErC,eAAe;IACb,QAAQ,EAAE;QACF,WAAW,YAAC,GAAQ,EAAE,EAAc;gBAAZ,gBAAK;;;;;;;;4BAGT,WAAM,OAAO,CAAC,GAAG,CACrC,KAAK,CAAC,GAAG,CAAC,UAAO,aAAkB;;;4CAAK,KAAA,IAAI,CAAA;4CAAC,WAAM,aAAa,EAAA;gDAAxB,WAAA,kBAAK,SAAmB,EAAE,QAAQ,EAAC,EAAA;;yCAAA,CAAC,CAC7E,EAAA;;4BAFK,aAAa,GAAG,SAErB;4BAED,WAAO,aAAa,EAAC;;;4BAErB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAC,CAAC,CAAC;4BACxB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;;;;;SAE3C;KACF;CACF,CAAC","sourcesContent":["import { save } from './fileStorage';\n\nexport default {\n  Mutation: {\n    async uploadFiles(obj: any, { files }: any) {\n      try {\n        // load files to fs\n        const uploadedFiles = await Promise.all(\n          files.map(async (uploadPromise: any) => save(await uploadPromise, 'public'))\n        );\n        // return filename and path to file\n        return uploadedFiles;\n      } catch (e) {\n        console.log('error', e);\n        throw new Error('upload:fileNotLoaded');\n      }\n    }\n  }\n};\n"]}]}